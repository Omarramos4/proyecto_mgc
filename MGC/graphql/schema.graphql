#Esquemas ---------------------------------------------------------------------------------
type 
type Usuario{
    NombreUsuario:String!
    NombreCompleto:String!
    Contrasenia:String!
    CorreoElectronico:String!
    ID_Rol:ID!
    ID_sucursal:ID!

    rol:Rol @belongsTo
    sucursal:Sucursal @belongsTo
}

type Departamento{
    Descripcion:String! 
}

type Rol{
    NombreRol:String!
    Descripcion:String!
}

type Sucursal{
    NombreSucursal:String!
    Direccion:String!
    ContactoPrincipal:String!
    Telefono:String!
}


#Consultas---------------------------------------------------------------------------------
type Query{
    usuarios:[Usuario!]! @all
    usuario(id:ID!):Usuario @find
}

#Mutaciones---------------------------------------------------------------------------------
type Mutation{
    createUsuario(
        NombreUsuario: String! @rules(apply: ["min:3", "unique:usuarios,NombreUsuario"])
        NombreCompleto: String!
        Contrasenia: String! @rules(apply: ["min:6"])
        CorreoElectronico: String! @rules(apply: ["email", "unique:usuarios,CorreoElectronico"])
        ID_Rol: ID! @rules(apply: ["exists:roles,id"]) # Validar que el rol exista
        ID_Sucursal: ID! @rules(apply: ["exists:sucursales,id"]) # Validar que la sucursal exista
    ): Usuario @create

    updateUsuario(
        id: ID!
        NombreUsuario: String! @rules(apply: ["min:3", "unique:usuarios,NombreUsuario"])
        NombreCompleto: String!
        Contrasenia: String! @rules(apply: ["min:6"])
        CorreoElectronico: String! @rules(apply: ["email", "unique:usuarios,CorreoElectronico"])
        ID_Rol: ID! @rules(apply: ["exists:roles,id"]) # Validar que el rol exista
        ID_Sucursal: ID! @rules(apply: ["exists:sucursales,id"]) # Validar que la sucursal exista
    ): Usuario @update

   
}
